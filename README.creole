upload packages to marmalade and do other things with it, from inside
Emacs.

== About ==

This supports (somewhat, there may be bugs) the old javascript based
marmalade upload API. That was very fragile and I hope to replace it
with a newer API but there were at least a few tools based on it so I
thought I ought to support it in the first instance.


== Changes ==

I've changed the name of this package to {{{marmalade-client}}}.


== Install ==

From [[http://marmalade-repo.org|marmalade]], obviously:

{{{
M-x package-install [RET] marmalade-client [RET]
}}}


== Setup ==

{{{
M-x customize-group [RET] marmalade-client [RET]
}}}


== Uploading a single (el) package file ==

If you have the package file open in a buffer and you do:

{{{
M-x marmalade-upload [RET]
}}}

it will attempt to upload that package.

You have to enter your marmalade username and password, which are then
cached in your Emacs session. Repeating your username is all that's
necessary.

Yes, it's not the most secure system.

== Uploading a tar package (or any package file) ==

If you're not currently viewing a package buffer marmalade-upload will
prompt for a package file. This can be a package as a tar or an el
file, it doesn't matter.

== Using shell instead of Emacs-Lisp ==

On #Emacs you can ask fsbot about {{{,nicferrier}}} and it will tell
you that I am a man with, amongst other things, an unhealthy obsession
with EmacsLisp. However, even the best of us needs shell sometimes.

Included in this repository is a shell version of marmalade upload,
the crucial parts of which are:

{{{
token=$(curl -f -s -d "name=${username}" \
    -d "password=${password}" \
    $marmaladeUrl/v1/users/login/ | jq -r '.token')
curl -F "name=${username}" -F "token=${token}" \
    -F "package=@${packageFileName};filename=$(basename ${packageFileName})" \
    $marmaladeUrl/v1/packages
}
}}}

You can easily make a shell script hanging off jenkins or whatever
fucked up bullshit you happen to use for ci.


== Other client API calls with marmalade ==

We have now exposed package removal:

{{{
M-x marmalade-remove-package [RET]
Marmalade-package: [complete from marmalade archive] [RET]
Username: 
}}}

Packages aren't actually removed. They are taken out of the archive
and made non-visible but we always retain them. //Just in case//.

Also we have exposed adding owners to a project:

{{{
M-x marmalade-client-add-owner [RET]
Marmalade package: [complete from marmalade archive] [RET]
new owner username: 
marmalade username:
}}}

Obviously type the name of the new user you want to have ownership
rights on your Marmalade package.

Once you've added another user they may upload new versions of the
package or remove it.


== Bugs? ==

Oh yes. Definitely.

* errors - when there's an error we don't handle it very gracefully at all.
